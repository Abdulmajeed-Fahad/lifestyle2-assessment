import { jsPDF } from "jspdf"
import { calculateScore, getScoreCategory } from "./scoring"

export async function generatePDF(reportData: any): Promise<Buffer> {
  const doc = new jsPDF()
  const lang = reportData.lang || "en"
  const isArabic = lang === "ar"

  // Set font for Arabic support
  if (isArabic) {
    doc.setR2L(true)
  }

  let yPos = 20

  // Header with logos
  doc.setFontSize(20)
  doc.setFont("helvetica", "bold")
  const title = isArabic ? "تقرير تقييم نمط الحياة" : "Lifestyle Assessment Report"
  doc.text(title, doc.internal.pageSize.width / 2, yPos, { align: "center" })
  yPos += 15

  // Personal Information
  doc.setFontSize(14)
  doc.setFont("helvetica", "bold")
  const personalInfoTitle = isArabic ? "المعلومات الشخصية" : "Personal Information"
  doc.text(personalInfoTitle, 20, yPos)
  yPos += 10

  doc.setFontSize(10)
  doc.setFont("helvetica", "normal")

  const personalInfo = reportData.personalInfo
  const infoLines = [
    `${isArabic ? "الاسم:" : "Name:"} ${personalInfo.name || "N/A"}`,
    `${isArabic ? "رقم الجوال:" : "Mobile:"} ${personalInfo.mobile || "N/A"}`,
    `${isArabic ? "العمر:" : "Age:"} ${personalInfo.age}`,
    `${isArabic ? "الجنس:" : "Gender:"} ${personalInfo.gender}`,
    `${isArabic ? "الطول:" : "Height:"} ${personalInfo.height} cm`,
    `${isArabic ? "الوزن:" : "Weight:"} ${personalInfo.weight} kg`,
    `${isArabic ? "مؤشر كتلة الجسم:" : "BMI:"} ${personalInfo.bmi}`,
  ]

  infoLines.forEach((line) => {
    doc.text(line, 20, yPos)
    yPos += 7
  })

  yPos += 10

  // Scores
  const scores = calculateScore(reportData.answers)
  const category = getScoreCategory(scores.total)

  doc.setFontSize(14)
  doc.setFont("helvetica", "bold")
  const scoresTitle = isArabic ? "النتائج" : "Results"
  doc.text(scoresTitle, 20, yPos)
  yPos += 10

  doc.setFontSize(12)
  doc.setFont("helvetica", "normal")

  // Overall Score
  doc.setFont("helvetica", "bold")
  doc.text(`${isArabic ? "النتيجة الإجمالية:" : "Overall Score:"} ${scores.total}/90`, 20, yPos)
  yPos += 7

  doc.setFont("helvetica", "normal")
  doc.text(`${isArabic ? "التصنيف:" : "Category:"} ${isArabic ? category.nameAr : category.nameEn}`, 20, yPos)
  yPos += 10

  // Score Breakdown
  const breakdownLines = [
    `${isArabic ? "العادات الغذائية:" : "Dietary Habits:"} ${scores.diet}/21`,
    `${isArabic ? "النشاط البدني:" : "Physical Activity:"} ${scores.activity}/18`,
    `${isArabic ? "العادات الصحية:" : "Health Habits:"} ${scores.health}/51`,
  ]

  breakdownLines.forEach((line) => {
    doc.text(line, 20, yPos)
    yPos += 7
  })

  yPos += 10

  // Recommendations
  if (yPos > 250) {
    doc.addPage()
    yPos = 20
  }

  doc.setFontSize(14)
  doc.setFont("helvetica", "bold")
  const recsTitle = isArabic ? "التوصيات" : "Recommendations"
  doc.text(recsTitle, 20, yPos)
  yPos += 10

  doc.setFontSize(10)
  doc.setFont("helvetica", "normal")

  const recText = isArabic
    ? "يرجى مراجعة التوصيات المفصلة في التقرير الكامل عبر الموقع الإلكتروني."
    : "Please review the detailed recommendations in the full report on the website."

  doc.text(recText, 20, yPos, { maxWidth: 170 })
  yPos += 20

  // Footer
  doc.setFontSize(8)
  doc.setTextColor(128, 128, 128)
  const footerText = isArabic
    ? "تم إنشاء هذا التقرير بواسطة نظام تقييم نمط الحياة"
    : "This report was generated by the Lifestyle Assessment System"
  doc.text(footerText, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, {
    align: "center",
  })

  // Convert to buffer
  const pdfData = doc.output("arraybuffer")
  return Buffer.from(pdfData)
}
